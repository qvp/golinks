// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: link.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const linkAdd = `-- name: LinkAdd :one
WITH inserted AS (
    INSERT INTO link (url, status)
        VALUES ($1, 'pending')
        ON CONFLICT (url) DO NOTHING
        RETURNING id, url, status, created_at, processed_at
)
SELECT id, url, status, created_at, processed_at FROM inserted
UNION ALL
SELECT id, url, status, created_at, processed_at FROM link WHERE url = $1
LIMIT 1
`

type LinkAddRow struct {
	ID          int32
	Url         string
	Status      pgtype.Text
	CreatedAt   pgtype.Timestamp
	ProcessedAt pgtype.Timestamp
}

func (q *Queries) LinkAdd(ctx context.Context, url string) (LinkAddRow, error) {
	row := q.db.QueryRow(ctx, linkAdd, url)
	var i LinkAddRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Status,
		&i.CreatedAt,
		&i.ProcessedAt,
	)
	return i, err
}

const linkGetByID = `-- name: LinkGetByID :one
SELECT id, url, status, created_at, processed_at FROM link WHERE id = $1
`

func (q *Queries) LinkGetByID(ctx context.Context, id int32) (Link, error) {
	row := q.db.QueryRow(ctx, linkGetByID, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Status,
		&i.CreatedAt,
		&i.ProcessedAt,
	)
	return i, err
}

const linkGetList = `-- name: LinkGetList :many
SELECT id, url, status, created_at, processed_at FROM link
LIMIT $1
OFFSET $2
`

type LinkGetListParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) LinkGetList(ctx context.Context, arg LinkGetListParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, linkGetList, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Status,
			&i.CreatedAt,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type LinkImageAddMultipleParams struct {
	LinkID int32
	Url    string
}

const linkSetStatus = `-- name: LinkSetStatus :exec
UPDATE link SET status = $2 WHERE id = $1
`

type LinkSetStatusParams struct {
	ID     int32
	Status pgtype.Text
}

func (q *Queries) LinkSetStatus(ctx context.Context, arg LinkSetStatusParams) error {
	_, err := q.db.Exec(ctx, linkSetStatus, arg.ID, arg.Status)
	return err
}
