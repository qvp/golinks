package db

import (
	"context"
	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/rs/zerolog/log"
	"golinks/internal/db/sqlc"
	"os"
)

// Queries join generated by sqlc and custom methods
type Queries struct {
	*sqlc.Queries
	pool *pgxpool.Pool
}

var pool *pgxpool.Pool
var Q *Queries

func InitDB() {
	pool = initPool()
	Q = NewQueries()
}

func NewQueries() *Queries {
	return &Queries{
		Queries: sqlc.New(pool),
		pool:    pool,
	}
}

func ClosePool() {
	pool.Close()
}

func initPool() *pgxpool.Pool {
	pool, err := pgxpool.New(context.Background(), os.Getenv("POSTGRES_CONN"))
	if err != nil {
		log.Error().Msgf("Failed to create test connection pool: %s", err)
	}

	return pool
}

func RunMigrations() {
	databaseURL := os.Getenv("POSTGRES_CONN") + "?sslmode=disable"
	migration, err := migrate.New("file://internal/db/migrations", databaseURL)
	if err != nil {
		log.Fatal().Err(err).Msg("cannot create new migrate instance")
	}

	if err = migration.Up(); err != nil && err != migrate.ErrNoChange {
		log.Fatal().Err(err).Msg("failed to run migrate up")
	}
}
